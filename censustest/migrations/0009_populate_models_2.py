# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2017-01-04 20:14
from __future__ import unicode_literals

from django.db import migrations, models
from django.db.models import Sum

COL_TITLE = 0
COL_CHOICE = 1
COL_TOTAL = 2
COL_SOURCE = 3
COL_QUESTION = 4
COL_TOPIC = 5
COL_SEQUENCE_NUM = 6
COL_SELECT_MULTIPLE = 7
COL_ALPHABETICAL_CHOICES = 8
COL_DESCRIPTION = 9
COL_FOOTNOTE = 10

def populate_models(apps, schema_editor):
	Question = apps.get_model("censustest", "Question")
	Choice = apps.get_model("censustest", "Choice")
	Topic = apps.get_model("censustest", "Topic")

	f = open('censustest/migrations/0009_census_data.csv', 'r')

	# first row is header
	f.readline()

	prevNumLeadingSpaces = 0
	q = None
	c = None
	questions = []
	first_choice = False
	for line in f:
		cols = line.split(",")
		if cols[COL_QUESTION] != "":
			q = Question.objects.create(
				text=cols[COL_QUESTION].strip(),
				title=cols[COL_TITLE],
				total_response_count=0,
				topic=Topic.objects.get(text=cols[COL_TOPIC]),
				sequence_num=cols[COL_SEQUENCE_NUM]
			)
			if cols[COL_SELECT_MULTIPLE] != "":
				q.select_multiple = bool(cols[COL_SELECT_MULTIPLE])
			if cols[COL_ALPHABETICAL_CHOICES] != "":
				q.alphabetical_choices = bool(cols[COL_ALPHABETICAL_CHOICES])
			if cols[COL_DESCRIPTION] != "":
				q.description = cols[COL_DESCRIPTION]
			if cols[COL_FOOTNOTE] != "\n":
				q.footnote = cols[COL_FOOTNOTE]
			questions.append(q)
			first_choice = True
		else:
			choice = cols[COL_CHOICE]

			numLeadingSpaces = len(choice) - len(choice.lstrip(" "))
			if not first_choice and numLeadingSpaces > prevNumLeadingSpaces:
				# remove previous choice since always want most specific choice (has most leading spaces)
				q.choice_set.last().delete()

			q.choice_set.create(
				text=cols[COL_CHOICE].strip(),
				response_count=int(cols[COL_TOTAL]),
				response_percent=0.0
			)

			prevNumLeadingSpaces = numLeadingSpaces

			if first_choice:
				first_choice = False

	for q in questions:
		choice_counts = q.choice_set.aggregate(Sum('response_count'))['response_count__sum']
		q.total_response_count = choice_counts
		q.save()
		for c in q.choice_set.all():
			c.response_percent = 100 * float(c.response_count) / choice_counts
			c.save()


class Migration(migrations.Migration):

	dependencies = [
		('censustest', '0008_add_description_and_footnote'),
	]

	operations = [
		migrations.RunPython(populate_models),
	]
